//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : composite
//  @ File Name : Composite.cpp
//  @ Date : 2017/12/25
//  @ Author : Owen-Li
//
//


#include "Composite.h"
#include <string>
#include <iostream>

Composite::Composite(string compname): Component(compname) {

}

Composite::~Composite() {
  vector<Component *>::iterator it = m_vecComp.begin();
  std::cout<<"~Composite"<<std::endl;
  while (it != m_vecComp.end()){
    if(*it != NULL){
       std::cout<<"----delete"<<(*it)->getName()<<std::endl;
       delete *it;
       *it = NULL;
    }
    m_vecComp.erase(it);
    it = m_vecComp.begin();
  }
}

void Composite::Operation() {
    std::cout<<"I am"<<compName<<std::endl;
}

void Composite::Add(Component* component) {
  m_vecComp.push_back(component);  
}

void Composite::Remove(Component* component) {
  vector<Component*>::iterator it;
  for(it = m_vecComp.begin(); it != m_vecComp.end(); ++it){
    if((*it)->getName() == component->getName()){
      if(*it != NULL){
        delete *it;
        *it = NULL;

      }
      m_vecComp.erase(it);
    }
  }
}

Component* Composite::GetChild(int index) {
  if(index > m_vecComp.size()){
    return NULL;
  }
  return m_vecComp[index-1];
}

void Composite::Print() {
  vector<Component*>::iterator it;
  for(it = m_vecComp.begin(); it != m_vecComp.end(); ++it){
    std::cout<<(*it)->getName()<<std::endl;
  }  

}

