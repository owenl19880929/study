//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Iteratro
//  @ File Name : ConcreteIterator.h
//  @ Date : 2018/1/10
//  @ Author : Owen-Li
//
//


#if !defined(_CONCRETEITERATOR_H)
#define _CONCRETEITERATOR_H
#include <iostream>
#include <vector>
#include "Iterator.h"
//#include "ConcreteAggregate.h"
 
template<class Item>
class ConcreteAggregate;
 
template<class Item>
class ConcreteIterator : public Iterator<Item> {
public:
	ConcreteIterator(ConcreteAggregate<Item> * a);
	~ConcreteIterator();
	void First();
	void Next();
	bool IsDone();
	Item* CurrentItem();
private:
	ConcreteAggregate<Item> * aggr;
	int cur;
};

template<class Item>
ConcreteIterator<Item>::ConcreteIterator(ConcreteAggregate<Item> * a): aggr(a),cur(0) {

}

template<class Item>
ConcreteIterator<Item>::~ConcreteIterator() {

}

template<class Item>
void ConcreteIterator<Item>::First() {
    cur = 0;
}

template<class Item>
void ConcreteIterator<Item>::Next() {
    if(cur<aggr->getLen())
    cur++;
}

template<class Item>
bool ConcreteIterator<Item>::IsDone() {
    return (cur>=aggr->getLen());
}

template<class Item>
Item* ConcreteIterator<Item>::CurrentItem() {
    if(cur<aggr->getLen())
        return &(*aggr)[cur];
    else
        return NULL;
}


#endif  //_CONCRETEITERATOR_H
