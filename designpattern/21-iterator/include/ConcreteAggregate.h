//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Iteratro
//  @ File Name : ConcreteAggregate.h
//  @ Date : 2018/1/10
//  @ Author : Owen-Li
//
//


#if !defined(_CONCRETEAGGREGATE_H)
#define _CONCRETEAGGREGATE_H
#include <vector>
#include "Iterator.h"
#include "Aggregate.h"
#include "ConcreteIterator.h"

using namespace std;

template <class Item>
class ConcreteAggregate : public Aggregate<Item>{
public:
	ConcreteAggregate();
        ~ConcreteAggregate();
	Item& operator[](int index);
	int getLen();
	Iterator<Item>* createIterator();
private:
	vector<Item> data;
};

template<class Item>
ConcreteAggregate<Item>::ConcreteAggregate() {
    data.push_back(1);
    data.push_back(2);
    data.push_back(3);
}

template<class Item>
Item& ConcreteAggregate<Item>::operator[](int index)  
{  
    return data[index];  
}

template<class Item>
int ConcreteAggregate<Item>::getLen() {
    return data.size();
}

template<class Item>
Iterator<Item>* ConcreteAggregate<Item>::createIterator() {
    return new ConcreteIterator<Item>(this);
}

template<class Item>
ConcreteAggregate<Item>::~ConcreteAggregate() {
}

#endif  //_CONCRETEAGGREGATE_H
